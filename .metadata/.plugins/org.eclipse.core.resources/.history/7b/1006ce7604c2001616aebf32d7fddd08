package day13;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

public class D13Q1 {
	private static String salt = "abc";
	private static int keySize = 3;
	private static int subKeySize = 5;
	private static int found = 0;
	
	public static void main(String[] args) throws IOException,
			NoSuchAlgorithmException {
		Map<Integer, String> possibles = new HashMap<Integer, String>();
		int ix = 0;
		while (found < 64) {
			String in = salt + ix++;
			byte[] out = MessageDigest.getInstance("MD5").digest(in.getBytes());
			String possibleHash = getString(out);
			if (isPossibleHash(possibleHash, keySize)) {
				// add to map using the current index as the hash
				possibles.put(ix, possibleHash);
				confirmHash(possibleHash, ix);
				System.out.println("Found: " + found);
				if (found == 64){
					System.out.println("Done! " + possibleHash );
					return;
				}
			}
		}
	}

	private static String getString(byte[] toString) {
		String result = "";
		for (int i = 0; i < toString.length; i++) {
			result += String.format("%02x", toString[i]);
		}
		return result;
	}

	private static boolean isPossibleHash(String input, int size) {
		char[] toCheck = input.toCharArray();

		for (int i = size; i < input.length(); i++) {
			int tmp = size - 1;
			boolean bad = false;
			while (tmp > 0) {
				if (toCheck[tmp] != toCheck[tmp - 1]) {
					bad = true;
					break;
				}
			}
			if (!bad)
				return true;

		}

		return false;
	}

	private static boolean confirmHash(String input, int ix) throws NoSuchAlgorithmException {
		System.out.println("Confirming " + input);
		char[] toCheck = input.toCharArray();
		for (int i = keySize; i < input.length(); i++) {
			int tmp = keySize - 1;
			boolean bad = false;
			while (tmp > 1) {
				if (toCheck[tmp] != toCheck[tmp]) {
					bad = true;
					break;
				}
			}
			System.out.println("Bad ? " + bad);
			if (!bad) {
				String sub = input.substring(i - keySize, i + 1);
				// check the next 1000 hashes for this substring.
				for(int j = 1; j<=1000; j++){
					byte[] out = MessageDigest.getInstance("MD5").digest((salt+j).getBytes());
					if(isPossibleHash(getString(out), subKeySize)){
						found++;
						return true;
					}
					
				}
			}

		}

		return false;
	}
}
